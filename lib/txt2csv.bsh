//imports
import java.io.*;
import java.io.BufferedReader;
import java.util.regex.*;

//vars
String strCurCmd = "";
String strCurHdr = "";
Hashtable htHeaders;
boolean bSPECIALCMD = false;
int DEBUGLVL = 2;
boolean blIsCmdBody = false;
String WD;

//consts
boolean bDataVerify = false;
String strMinClnLimRegExp = "{2,}";//all "\" are replaced with "\\"
String sOClDlRgEx = ",";//all "\" are replaced with "\\"
String strWordRegExp = "([A-Za-z0-9/\\-\\*%]+ ?)+";//all "\" are replaced with "\\"
String strColumnMinRepRegExp=" {2,}"; //all "\" are replaced with "\\"
String strDataRegExp="^ *((([A-Za-z0-9:%\\*,\\._]|-) ?)+("+strColumnMinRepRegExp+"|$)){2,}"; //all "\" are replaced with "\\"
String strCmdNameRegExp="^> *([a-z0-9\\-:= ]+)$"; //all "\" are replaced with "\\"
String strCmdOutBgnRegExp=".*Command Accepted.*"; //all "\" are replaced with "\\"
String strCmdOutEndRegExp=".*(Command Executed|Command Completed).*"; //all "\" are replaced with "\\"

String[] straCmdNmRefineRepRegExp = new String[] {"> +", ""}; //all "\" are replaced with "\\"
String[] straTextPreProcRegExp = new String[] {"^ +| +$", "", strColumnMinRepRegExp, sOClDlRgEx, sOClDlRgEx+"-+", sOClDlRgEx+"n/a", "-+"+sOClDlRgEx, "n/a"+sOClDlRgEx}; //all "\" are replaced with "\\"
String[][] straMergedHdrs = new String[][] {
{"CARD"+sOClDlRgEx+"VERSION"+sOClDlRgEx+"PST"+sOClDlRgEx+"SST"+sOClDlRgEx+"AST"+sOClDlRgEx+"MSU"+sOClDlRgEx+"CPU",
"                                                           USAGE USAGE",
"CARD"+sOClDlRgEx+"VERSION"+sOClDlRgEx+"PST"+sOClDlRgEx+"SST"+sOClDlRgEx+"AST"+sOClDlRgEx+"MSU USAGE"+sOClDlRgEx+"CPU USAGE"},
{"                                      FAIL     REROUTE\\      FORWARD",
"SERVICE"+sOClDlRgEx+"SUCCESS"+sOClDlRgEx+"ERRORS"+sOClDlRgEx+"RATIO"+sOClDlRgEx+"WARNINGS"+sOClDlRgEx+"TO GTT"+sOClDlRgEx+"TOTAL",
"SERVICE"+sOClDlRgEx+"SUCCESS"+sOClDlRgEx+"ERRORS"+sOClDlRgEx+"FAIL RATIO"+sOClDlRgEx+"REROUTE\\WARNINGS"+sOClDlRgEx+"FORWARD TO GTT"+sOClDlRgEx+"TOTAL"},
{""+sOClDlRgEx+"THRESH"+sOClDlRgEx+"CONFIG/"+sOClDlRgEx+"CONFIG/"+sOClDlRgEx+""+sOClDlRgEx+"TPS"+sOClDlRgEx+"PEAK"+sOClDlRgEx+"PEAKTIMESTAMP",
"                          RSVD      MAX",
""+sOClDlRgEx+"THRESH"+sOClDlRgEx+"CONFIG/RSVD"+sOClDlRgEx+"CONFIG/MAX"+sOClDlRgEx+""+sOClDlRgEx+"TPS"+sOClDlRgEx+"PEAK"+sOClDlRgEx+"PEAKTIMESTAMP"},
{"CARD"+sOClDlRgEx+"CPU"+sOClDlRgEx+"TOTAL"+sOClDlRgEx+"CLASS 0"+sOClDlRgEx+"CLASS 1",
""+sOClDlRgEx+"USAGE"+sOClDlRgEx+"MSU RATE"+sOClDlRgEx+"MESSAGING RATE"+sOClDlRgEx+"MESSAGING RATE",
"CARD"+sOClDlRgEx+"CPU USAGE"+sOClDlRgEx+"TOTAL MSU RATE"+sOClDlRgEx+"CLASS 0 MESSAGING RATE"+sOClDlRgEx+"CLASS 1 MESSAGING RATE"},
{"                    CARD IPLNK",
"ANAME"+sOClDlRgEx+"LOC"+sOClDlRgEx+"PORT"+sOClDlRgEx+"LINK"+sOClDlRgEx+"PST"+sOClDlRgEx+"SST"+sOClDlRgEx+"ASPID",
"ANAME"+sOClDlRgEx+"CARD LOC"+sOClDlRgEx+"IPLNK PORT"+sOClDlRgEx+"LINK"+sOClDlRgEx+"PST"+sOClDlRgEx+"SST"+sOClDlRgEx+"ASPID"},
{"                    CARD  IPLNK",
"ANAME"+sOClDlRgEx+"LOC"+sOClDlRgEx+"PORT"+sOClDlRgEx+"LINK"+sOClDlRgEx+"ADAPTER"+sOClDlRgEx+"LPORT"+sOClDlRgEx+"RPORT"+sOClDlRgEx+"OPEN"+sOClDlRgEx+"ALW",
"ANAME"+sOClDlRgEx+"CARD LOC"+sOClDlRgEx+"IPLNK PORT"+sOClDlRgEx+"LINK"+sOClDlRgEx+"ADAPTER"+sOClDlRgEx+"LPORT"+sOClDlRgEx+"RPORT"+sOClDlRgEx+"OPEN"+sOClDlRgEx+"ALW"},
{"          E1                                                   LINK    MINSU",
"LOC"+sOClDlRgEx+"PORT"+sOClDlRgEx+"CRC4"+sOClDlRgEx+"CAS"+sOClDlRgEx+"ENCODE"+sOClDlRgEx+"E1TSEL"+sOClDlRgEx+"SI"+sOClDlRgEx+"SN"+sOClDlRgEx+"CHANBRDG"+sOClDlRgEx+"CLASS"+sOClDlRgEx+"RATE",
"LOC"+sOClDlRgEx+"E1 PORT"+sOClDlRgEx+"CRC4"+sOClDlRgEx+"CAS"+sOClDlRgEx+"ENCODE"+sOClDlRgEx+"E1TSEL"+sOClDlRgEx+"SI"+sOClDlRgEx+"SN"+sOClDlRgEx+"CHANBRDG"+sOClDlRgEx+"LINK CLASS"+sOClDlRgEx+"MINSU RATE"},
{"LOC"+sOClDlRgEx+"LINK"+sOClDlRgEx+"LSN"+sOClDlRgEx+"SLC"+sOClDlRgEx+"TYPE"+sOClDlRgEx+"ANAME"+sOClDlRgEx+"SLKTPS/"+sOClDlRgEx+"MAXSLKTPS",
"                                                      RSVDSLKTPS",
"LOC"+sOClDlRgEx+"LINK"+sOClDlRgEx+"LSN"+sOClDlRgEx+"SLC"+sOClDlRgEx+"TYPE"+sOClDlRgEx+"ANAME"+sOClDlRgEx+"SLKTPS/RSVDSLKTPS"+sOClDlRgEx+"MAXSLKTPS"},
{"                                      L2T               PCR  PCR    E1   E1    ",
"LOC"+sOClDlRgEx+"LINK"+sOClDlRgEx+"LSN"+sOClDlRgEx+"SLC"+sOClDlRgEx+"TYPE"+sOClDlRgEx+"SET"+sOClDlRgEx+"BPS"+sOClDlRgEx+"ECM"+sOClDlRgEx+"N1"+sOClDlRgEx+"N2"+sOClDlRgEx+"LOC"+sOClDlRgEx+"PORT"+sOClDlRgEx+"TS",
"LOC"+sOClDlRgEx+"LINK"+sOClDlRgEx+"LSN"+sOClDlRgEx+"SLC"+sOClDlRgEx+"TYPE"+sOClDlRgEx+"L2T SET"+sOClDlRgEx+"BPS"+sOClDlRgEx+"ECM"+sOClDlRgEx+"PCR N1"+sOClDlRgEx+"PCR N2"+sOClDlRgEx+"E1 LOC"+sOClDlRgEx+"E1 PORT"+sOClDlRgEx+"TS"},
{"                                     L3T SLT              GWS GWS GWS",
"LSN"+sOClDlRgEx+"APCI   (SS7)"+sOClDlRgEx+"SCRN"+sOClDlRgEx+"SET"+sOClDlRgEx+"SET"+sOClDlRgEx+"BEI"+sOClDlRgEx+"LST"+sOClDlRgEx+"LNKS"+sOClDlRgEx+"ACT"+sOClDlRgEx+"MES"+sOClDlRgEx+"DIS"+sOClDlRgEx+"SLSCI"+sOClDlRgEx+"NIS",
"LSN"+sOClDlRgEx+"APCI   (SS7)"+sOClDlRgEx+"SCRN"+sOClDlRgEx+"L3T SET"+sOClDlRgEx+"SLT SET"+sOClDlRgEx+"BEI"+sOClDlRgEx+"LST"+sOClDlRgEx+"LNKS"+sOClDlRgEx+"GWS ACT"+sOClDlRgEx+"GWS MES"+sOClDlRgEx+"GWS DIS"+sOClDlRgEx+"SLSCI"+sOClDlRgEx+"NIS"},
{"                                     L3T SLT              GWS GWS GWS",
"LSN"+sOClDlRgEx+"APCN   (SS7)"+sOClDlRgEx+"SCRN"+sOClDlRgEx+"SET"+sOClDlRgEx+"SET"+sOClDlRgEx+"BEI"+sOClDlRgEx+"LST"+sOClDlRgEx+"LNKS"+sOClDlRgEx+"ACT"+sOClDlRgEx+"MES"+sOClDlRgEx+"DIS"+sOClDlRgEx+"SLSCI"+sOClDlRgEx+"NIS",
"LSN"+sOClDlRgEx+"APCN   (SS7)"+sOClDlRgEx+"SCRN"+sOClDlRgEx+"L3T SET"+sOClDlRgEx+"SLT SET"+sOClDlRgEx+"BEI"+sOClDlRgEx+"LST"+sOClDlRgEx+"LNKS"+sOClDlRgEx+"GWS ACT"+sOClDlRgEx+"GWS MES"+sOClDlRgEx+"GWS DIS"+sOClDlRgEx+"SLSCI"+sOClDlRgEx+"NIS"},
{"    CARD     NUM    NUM      RSVD       MAX",
"TYPE"+sOClDlRgEx+"CARDS"+sOClDlRgEx+"LINKS"+sOClDlRgEx+"TPS"+sOClDlRgEx+"TPS",
"CARD TYPE"+sOClDlRgEx+"NUM CARDS"+sOClDlRgEx+"NUM LINKS"+sOClDlRgEx+"RSVD TPS"+sOClDlRgEx+"MAX TPS"}
};


String[][][] straHdrsPos = new String[][][] 
{
  {//1
    {"rept-stat-db", "            C   LEVEL    TIME LAST BACKUP     C   LEVEL    TIME LAST BACKUP", "13", "15", "24", "47", "49", "58"},
    {"rept-stat-db", "    CARD/APPL  LOC   C  T  LEVEL       TIME LAST UPDATE   EXCEPTION", "16", "22", "25", "28", "40", "59"},
    {"rept-stat-db", "                     C  BIRTHDATE          LEVEL       EXCEPTION", "22", "25", "44", "56"},
    {"rept-stat-db", "    CARD/APPL  LOC   C  BIRTHDATE          LEVEL       EXCEPTION    IN-SRVC", "16", "22", "25", "44", "56", "69"}
  },
  {//2
    {"rept-stat-mps", "                       VERSION       PST            SST        AST", "24", "38", "53", "64"},
    {"rept-stat-mps", "    CARD   PST          SST         GSM STAT", "12", "25", "37"},
    {"rept-stat-mps", "    CARD   PST          SST         ATINPQ STAT", "12", "25", "37"},
  },
  {//3
    {"rept-stat-sccp", "    CARD   VERSION      PST           SST        AST       MSU   CPU", "12", "25", "39", "50", "60", "66"},
    {"rept-stat-sccp", "      SERVICE    SUCCESS    ERRORS   RATIO     WARNINGS        TO GTT     TOTAL", "16", "25", "35", "43", "56","70"},
    {"rept-stat-sccp", "    HIGHEST 10 OVERALL DAILY PEAKS        LAST 10 DAILY PEAK SCCP LOADS", "43"},
    {"rept-stat-sccp", "    CARD   CPU      TOTAL       CLASS 0          CLASS 1", "12", "21", "33", "50"}
  },
  {//4
    {"rept-stat-slk", "    SLK      LSN         CLLI        PST          SST       AST", "14", "26", "38", "51", "61"}
  },
  {//5
    {"rept-stat-iptps", "               THRESH  CONFIG/  CONFIG/         TPS   PEAK       PEAKTIMESTAMP", "16", "24", "33", "41", "49", "55", "62"}
  },
  {//6
    {"rept-stat-assoc", "    ANAME           LOC  PORT   LINK PST             SST             ASPID", "21", "26", "33", "38", "54", "70"}
  },
  {//7
    {"rtrv-as", "    AS Name          Mode        Tr ms  Association Names   ", "22", "34", "41"}
  },
  {//8
    {"rtrv-assoc", "    ANAME           LOC   PORT  LINK ADAPTER LPORT RPORT OPEN ALW", "21", "27", "33", "38", "46", "52", "58", "63"}
  },
  {//9
    {"rtrv-e1", "    LOC   PORT  CRC4  CAS  ENCODE  E1TSEL    SI  SN  CHANBRDG  CLASS   RATE", "11", "17", "23", "28", "36", "46", "50", "54", "64", "72"}
  },
  {//10
    {"rept-stat-e1", "    LOC   E1PORT   PST              SST          AST", "11", "20", "37", "50"}
  },
  {//11
    {"rtrv-gpl", "    GPL       CARD  RELEASE      APPROVED         TRIAL        REMOVE TRIAL", "15", "21", "34", "51", "64"}
  },
  {//12
    {"rtrv-gsmopts", "    GSM OPTIONS ", "24", "40", "59", "51", "64"}
  },
  {//13
    {"rtrv-l2t", "     L2TSET    T1     T2     T3   T4NPP   T4EPP     T5     T6    T7    NODATA", "12", "20", "26", "33", "40", "48", "56", "63", "69"}
  },
  {//14
    {"rtrv-l3t", "     L3TSET   T1      T2      T3      T4      T5      T6      T7", "12", "20", "26", "37", "42", "50", "58"}
  },
  {//15
    {"rtrv-m2pa-tset", "    TSET T1     T2     T3    T4N   T4E  T5    T6   T7    T16    T17  T18", "10", "17", "24", "30", "36", "41", "47", "52", "58", "65", "70"}
  },
  {//16
    {"rtrv-ss7opts", "    SS7 OPTIONS", "17"}
  },
  {//17
    {"rtrv-stp", "    Card  Part Number  Rev Serial Number  Type     DB     APPL     GPL Version", "11", "24", "28", "43", "52", "59", "68"}
  },
  {//18
    {"rtrv-ttmap", "    LSN         IO  ETT  MTT", "17", "21", "26"}
  },
  {//19
    {"rtrv-uaps", "    SET  TIMER      TVALUE  PARM      PVALUE", "8", "15", "27", "33"}
  },
  {//20
    {"rtrv-uim-acthresh", "    UIMN      LIMIT     INTRVL", "15", "25"}
  },
  {//21
    {"rtrv-slt", "    SLTSET T1   T2   MODE    ENABLED PATTERN", "12", "17", "22", "30", "38"}
  },
  {//22
    {"rtrv-homern", "    RN", "28"}
  },
  {//23
    {"rtrv-mrn", "       MRNSET MAPSET  MAPPC          MAPSSN      PCN            RC WT %WT THR", "14", "22", "37", "47", "64", "67", "70", "74"},
    {"rtrv-mrn", "       MRNSET MAPSET  MAPPCN         MAPSSN      PCN            RC WT %WT THR", "14", "22", "37", "47", "64", "67", "70", "74"},
    {"rtrv-mrn", "       MRNSET MAPSET  MAPPC          MAPSSN NET  PC             RC WT %WT THR", "14", "22", "37", "44", "48", "64", "67", "70", "74"},
  },
  {//24
    {"rtrv-ip-host", "    LOCAL IPADDR     LOCAL HOST", "22"},
    {"rtrv-ip-host", "    REMOTE IPADDR    REMOTE HOST", "22"}
  },
  {//25
    {"rtrv-ctrl-feat", "    Feature Name              Partnum   Status Quantity", "31", "41", "48"}
  },
  {//26
    {"rtrv-sid", "       PCA             PCI          PCN                CLLI              PCTYPE", "20", "35", "56", "73"}
  },
  {//27
    {"rtrv-card:links=ipsg", "    CARD   TYPE      APPL     LSET NAME   LINK SLC   RSVDSLKTPS  MAXSLKTPS", "12", "22", "31", "43", "48", "54", "66"}
  },
   {//28
    {"rtrv-gttsel", "    GTI                   CG                   CDPA             CGPA", "27", "48", "65"},
    {"rtrv-gttsel", "    NAT  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "10", "14", "22", "27", "31", "37", "48", "65"}
  },
  {//29
     {"rtrv-gttset", "    GTTSN      NETDOM  SETTYPE  REFCNT   NDGT", "16", "24", "33", "42"}
  },
  {//30
    {"rtrv-aiqopts", "    AIQ OPTIONS ", "15"},
    {"rtrv-aiqopts", "    TRIGTYPE     PFX", "18"}
  },
  {//31
    {"rtrv-ainpopts", "    AINP OPTIONS ", "17"}
  },
  {//32
    {"rtrv-dstn", "       DPCI          CLLI        BEI ELEI   ALIASA           ALIASN/N24    DMN", "22", "34", "38", "45", "62", "74"}
  },
  {//33
    {"rtrv-feat", "    EAGLE FEATURE LIST ", "16"}
  },
  {//34
    {"rtrv-gttact", "    ACTID      ACTION   ATCAPERR ITCAPERR UDTSERR UIMREQD", "16", "25", "36", "43", "51"}
  },
  {//35
    //{"rtrv-gttaset", "    ACTSN      TEST  ActIds   ", "16", "22", "38", "45"},
    {"rtrv-gttaset", "               MODE", "22", "28", "35"}
  },
  {//36
    {"rtrv-ip-card", "    LOC", "17"}
  },
  {//37
    {"rtrv-ip-lnk", "    LOC   PORT IPADDR          SUBMASK         DUPLEX  SPEED MACTYPE AUTO MCAST ", "11", "16", "32", "48", "56", "62", "70", "74"}
  },
  {//38
    {"rtrv-ip-rte", "    LOC   DEST             SUBMASK          GTWY             ", "11", "28", "45"}
  },
  {//41
    {"rtrv-measopts", "    PLATFORMENABLE ", "24"}
  },
  {//42
    {"rtrv-mtc-measopts", "    MTCHLNP          ", "24"}
  },
  {//43
    {"rtrv-na", "    TYPE    GC           NA", "13", "26"}
  },
  {//44
    {"rtrv-rte", "       DPCI             ALIASA           ALIASN/N24    RTX   CLLI", "25", "42", "56", "62"}
  },
  {//45
    {"rtrv-sccpopts", "    SCCP OPTIONS ", "26"}
  },
  {//46
    {"rtrv-scr-aftpc", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//47
    {"rtrv-scr-blkdpc", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//48
    {"rtrv-scr-blkopc", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//49
    {"rtrv-scr-cdpa", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//50
    {"rtrv-scr-cgpa", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//51
    {"rtrv-scr-destfld", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//52
    {"rtrv-scr-dpc", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"},
    {"rtrv-scr-dpc", "    SR      ZONE   AREA     ID       NSFI    NSR/ACT", "10", "19", "28", "37", "46"},
    {"rtrv-scr-dpc", "    SR      NPC                      NSFI    NSR/ACT", "10", "37", "46"},
    {"rtrv-scr-dpc", "    SR    MSA      SSA      SP       NSFI    NSR/ACT", "10", "19", "28", "37", "46"}
  },
  {//53
    {"rtrv-scr-opc", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"},
    {"rtrv-scr-opc", "    SR      NPC                      NSFI    NSR/ACT", "10", "37", "46"}
  },
  {//54
    {"rtrv-scr-sio", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"},
    {"rtrv-scr-sio", "    SR    NIC  PRI   SI  H0     H1     NSFI    NSR/ACT", "10", "15", "21", "25", "32", "39", "47"}
  },
  {//55
    {"rtrv-scr-tt", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
    {//56
    {"rtrv-scrset", "    SCRN  NSFI    NSR/ACT  FULL  RULES  TABLES  DESTFLD       ", "11", "19", "28", "34", "41", "49"}
  },
  {//58
    {"rtrv-srvsel", "    GTII    TT   NP       NAI   SSN  SNP   SNAI   SERV   GTTRQD", "13", "18", "27", "33", "38", "44", "51", "58"},
    {"rtrv-srvsel", "    DFLTACT", "12"}
  },
  {//59
    {"rtrv-stp", "    Card  Part Number  Rev Serial Number  Type     DB     APPL     GPL Version", "11", "24", "28", "43", "52", "59", "68"}
  },
  {//60
    {"rtrv-stpopts", "    STP OPTIONS ", "16"}
  },
  {//84
    {"rtrv-scr-aftpc", "    SR      ZONE   AREA     ID       SSN      SCMGFID  NSFI    NSR/ACT", "10", "19", "28", "37", "46", "56", "63"}
  },
  {//85
    {"rtrv-gsms-opcode", "    OPCODE  OPNAME     DFLTACT       PCA             SSN   MAPSET RI  TT", "13", "24", "38", "54", "60", "67", "71"}
  },
  {//86
    {"rtrv-gsmssn-scrn", "    SSN       ORIG      DEST", "15", "25"}
  },
  {//87
    {"rtrv-ftp-serv", "    APP       IPADDR           LOGIN            PRIO", "14", "31", "48"}
  },
  {//88
    {"rtrv-tps", "    CARD     NUM    NUM      RSVD       MAX"},
    {"rtrv-tps", "    TYPE   CARDS  LINKS       TPS       TPS", "12", "19", "28", "37"}
  },
  {//89
    {"rtrv-loopset", "    LoopSet    Mode     Point Codes", "13", "24"}
  },
  {//90
    {"rtrv-card", "    CARD   TYPE      APPL     LSET NAME   LINK SLC LSET NAME   LINK SLC", "12", "22", "31", "43", "48", "52", "64", "69"}
  },
  {//91
    {"rtrv-slk", "                                      L2T               PCR  PCR    E1   E1    ", "9"},
    {"rtrv-slk", "    LOC  LINK LSN        SLC TYPE     ANAME           SLKTPS/      MAXSLKTPS", "9", "14", "25", "29", "38", "54", "67"},
    {"rtrv-slk", "    LOC  LINK LSN        SLC TYPE     SET  BPS    ECM   N1   N2     LOC  PORT TS", "9", "14", "25", "29", "38", "43", "50", "56", "61", "68", "73", "78"}
  },
  {//92
    {"rtrv-ls", "                                     L3T SLT              GWS GWS GWS", "16"}, /*fake header*/
    {"rtrv-ls", "    LSN           APCI   (SS7)  SCRN SET SET BEI LST LNKS ACT MES DIS SLSCI NIS", "16", "32", "37", "41", "45", "49", "53", "58", "62", "66", "70", "76"},
    {"rtrv-ls", "    LSN           APCN   (SS7)  SCRN SET SET BEI LST LNKS ACT MES DIS SLSCI NIS", "16", "32", "37", "41", "45", "49", "53", "58", "62", "66", "70", "76"}
  },
  {//93
    {"rept-stat-ls", "    LSN           APCA             PST           SST       AST", "17", "36", "50", "60"},
    {"rept-stat-ls", "    LSN           APCN             PST           SST       AST", "17", "36", "50", "60"},
    {"rept-stat-ls", "    LSN           APCN24           PST           SST       AST", "17", "36", "50", "60"},
    {"rept-stat-ls", "    LSN           APCI             PST           SST       AST", "17", "36", "50", "60"},
    {"rept-stat-ls", "    LSN           APCN16           PST           SST       AST", "17", "36", "50", "60"}
  }
};

String strSpecialCmds = "rtrv-gttaset|rtrv-gsmopts|rtrv-meas-sched|rtrv-sccp-serv|rtrv-serial-num|rtrv-sg-opts|rtrv-tbl-capacity|"
                      + "rtrv-th-alm|rtrv-ip-card|rtrv-measopts|rtrv-mtc-measopts|rtrv-spc|rtrv-feat|rtrv-gttsel|rtrv-dstn|"
                      + "rtrv-gta|rtrv-map|rept-stat-ls|rtrv-card|rtrv-aiqopts";

Boolean bToCSV = true;


//body
txt2csv()
{

int UNKWN=0;int DATA=1;int HDR=2;int CMDNM=3;int OUTBGN=4;int OUTEND=5;

String[][][] concatArrs(String[][][] first, String[][][] second) {
  myprint("in concatArrs", 1);
  String[][][] result = Arrays.copyOf(first, first.length + second.length);
  System.arraycopy(second, 0, result, first.length, second.length);
  return result;
}

void
myprint(String line, int level)
{
  if (DEBUGLVL>=level) {
    print(line);
  }
}

StringBuffer readFullOutput(String strFileName)
{
  myprint("in readFullOutput", 1);
  StringBuffer result = new StringBuffer();
  BufferedReader aReader =  new BufferedReader(new FileReader(strFileName));
  String strLine = null;
  while (( aLine = aReader.readLine()) != null) {
    result.append(aLine);
    result.append(System.getProperty("line.separator"));
  }
  aReader.close();
  return result;
}

String replaceLineSeq(String strLine, String[] arRules)
{
  myprint("in replaceLineSeq", 1);
  String result = strLine;
  for (int iRule=0; iRule<arRules.length; iRule+=2) {
    result = result.replaceAll(arRules[iRule], arRules[iRule+1]);
  }
  return result;
}

String checkMergeHdr(String strNewHdr)
{
  myprint("in checkMergeHdr", 1);
  String result = strNewHdr;
  for (int i=0; i<straMergedHdrs.length; i++) {
    for (int j=0; j<2; j++) {
      if (straMergedHdrs[i][j].equals(strNewHdr))
        return straMergedHdrs[i][2];
    }
  }
  return result;
}

boolean findHdr(String strLine, int[] ioutNb)
{
  myprint("in findHdr", 1);
  myprint("findHdr: "+strLine, 3);
  for (int i=0; i<straHdrsPos.length; i++) {
    for (int j=0; j<straHdrsPos[i].length; j++) {
      myprint("findHdr:"+i+","+j+",0:"+straHdrsPos[i][j][0]+"::"+straHdrsPos[i][j][1], 4);
      if (straHdrsPos[i][j][1].equals(strLine)) {
        ioutNb[0] = i;
        ioutNb[1] = j;
        return true;
      }
    }
  }
  return false;
}

int getLineType(String strLine)
{
  myprint("in getLineType", 1);
  myprint("getLineType:"+strLine, 2);
  int result = UNKWN;
  int[] i=new int[2];
  if (strLine.matches("^[- ]{2,}$")) {return result;}
  if (strLine.matches(strCmdNameRegExp)) {return CMDNM;}
  if (strLine.matches(strCmdOutBgnRegExp)) {return OUTBGN;}
  if (strLine.matches(strCmdOutEndRegExp)) {return OUTEND;}
  if (!bSPECIALCMD && findHdr(strLine, i)) {return HDR;}
  if (!bSPECIALCMD && strLine.matches(strDataRegExp)) {return DATA;}
  return result;
}

void initCmdBlock(String strCmdName)
{
  myprint("in initCmdBlock", 1);
  strCurCmd = strCmdName;
  if (strCurCmd.matches(strSpecialCmds))
  {   bSPECIALCMD = true;
      myprint("initCmdBlock:bSPECIALCMD ON", 2);
  } else {
      myprint("initCmdBlock:bSPECIALCMD OFF", 2);
      bSPECIALCMD = false;  } 
  htHeaders = new Hashtable();
}

void addHeader(String strHeader)
{
  myprint("in addHeader", 1);
  if (! htHeaders.containsKey(strHeader)) {
    htHeaders.put(strHeader, new ArrayList());
  }
  strCurHdr = strHeader;
}

void addData(String strHeader, String strData)
{
  myprint("in addData", 1);
  if (htHeaders.size()>0) {
    ArrayList alData = htHeaders.get(strHeader);
    strData = strData.replaceAll(",", ":");
    alData.add(strData);
  } else {
    myprint("addData: skip line "+strData, 2);
  }
}

String addDelimiters(String strIn, int iCmdNb, int jHdrNb)
{
  myprint("in addDelimiters", 1);
  int iPos;
  if (strIn.matches(".*EAGLE5 44.*")) {return "";}
  String result = strIn;
  for (int i=straHdrsPos[iCmdNb][jHdrNb].length-1; i>=2; i--) {
    myprint("addDelimiters:"+straHdrsPos[iCmdNb][jHdrNb], 4);
    iPos = Integer.parseInt(straHdrsPos[iCmdNb][jHdrNb][i])-1;
    if (iPos>=strIn.length()) {
      myprint("addDelimiters:Drop as too short: "+result, 1); 
    } else {
      if (Character.isLetterOrDigit(result.charAt(iPos-1)) && 
         Character.isLetterOrDigit(result.charAt(iPos))) {
           myprint("addDelimiters:Drop as sep within word(@"+iPos+"): "+result.substring(iPos, result.length()), 1);
           return "";
      }
      result = result.substring(0, iPos) + sOClDlRgEx + result.substring(iPos, result.length());
      myprint("addDelimiters:"+iPos+":"+result, 3);
    }
  }
  result = replaceLineSeq(result, new String[] {"^ +| +$", "", " *"+sOClDlRgEx+" *", sOClDlRgEx});
  return result;
}

/*
* SPECIAL COMMAND THREATMENT FUNCTIONS  ===B=E=G=I=N=S==H=E=R=E===
*/

void
treat_rtrv_gttaset(String line)
{
  myprint("in treat_rtrv_gttaset", 1);
  String hdr = "    ACTSN     TST MOD  ActIds";
  addHeader(hdr);
  if (line.matches("^.*(on|off).*$")) {
    line = replaceLineSeq(line, new String[] {"(,-+)+,?", ""});
    addData(strCurHdr, line);
  }
  if (line.matches("^.*GTT-ASET.*$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-gttaset", hdr, "14", "22"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_gsmopts(String line)
{
  myprint("in treat_rtrv_gsmopts", 1);
  if (line.matches("^.*GSM OPTIONS.*$")) {
    addHeader("    ITEM1              VALUE1          ITEM2              VALUE2");
  }
  if (line.matches("^.*GFLEXMAPLAYERRTG.*$")) {
    line = replaceLineSeq(line, new String[] {"     ", ""});
  }
  if (line.matches("^.*=.*$")) {
    line = replaceLineSeq(line, new String[] {"=", " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^.*G-Flex.*$")) {
      addHeader("    ITEM1          VALUE1 ITEM2       VALUE2 ITEM3       VALUE3");
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-gsmopts", 
                                      "    ITEM1              VALUE1          ITEM2              VALUE2", 
                                      "21", "39", "59"},
                                     {"rtrv-gsmopts", 
                                      "    ITEM1          VALUE1 ITEM2       VALUE2 ITEM3       VALUE3", 
                                      "20", "27", "39", "46", "58"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_meas_sched(String line)
{
  myprint("in treat_rtrv_meas_sched", 1);
  String hdr = "meas-sched PARAMETER  VALUE";
  addHeader(hdr);
  if (line.matches("^.*=.*$")) {
    line = replaceLineSeq(line, new String[] {"=", " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-meas-sched", hdr, "21"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_sccp_serv(String line)
{
  myprint("in treat_rtrv_sccp_serv", 1);
  String hdr = "sccp-serv PARAMETER  VALUE";
  addHeader(hdr);
  String dlmt = " : ";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, "   "});
    addData(strCurHdr, line);
  }
  if (line.matches("^.*SCCPSRV.*$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-sccp-serv", hdr, "21"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_serial_num(String line)
{
  myprint("in treat_rtrv_serial_num", 1);
  String hdr = "serial-num PARAMETER       VALUE";
  addHeader(hdr);
  String dlmt = "(=|is)";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, "  "});
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-serial-num", hdr, "25"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_sg_opts(String line)
{
  myprint("in treat_rtrv_sg_opts", 1);
  String hdr = "sg_opts PARAMETER   VALUE";
  addHeader(hdr);
  String dlmt = ": ";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, "  "});
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-sg-opts", hdr, "20"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_tbl_capacity(String line)
{
  myprint("in treat_rtrv_tbl_capacity", 1);
  String hdr = "rtrv_tbl_capacity                                                                    ";
  addHeader(hdr);
  String dlmt = " of ";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, "/", "[()]", " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-tbl-capacity", hdr, "13", "24", "33", "35", "44"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_th_alm(String line)
{
  myprint("in treat_rtrv_th_alm", 1);
  String hdr = "rtrv-th-alm                                                                    ";
  addHeader(hdr);
  String dlmt = ": ";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, "  "});
    addData(strCurHdr, line);
  }
  if (line.matches("^.*RTRV-TH-ALM.*COMPLTD.*$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-th-alm", hdr, "48"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_ip_card(String line)
{
  myprint("in treat_rtrv_ip_card", 1);
  String hdr = "rtrv-ip-card                                                                    ";
  addHeader(hdr);
  addData(strCurHdr, line);
  if (line.matches("^ +$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-ip-card", hdr, "16"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_measopts(String line)
{
  myprint("in treat_rtrv_measopts", 1);
  String hdr = "rtrv-measopts                                                                    ";
  addHeader(hdr);
  String dlmt = "=";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^ +$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-measopts", hdr, "23"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_mtc_measopts(String line)
{
  myprint("in treat_rtrv_mtc_measopts", 1);
  String hdr = "rtrv-mtc-measopts                                                                    ";
  addHeader(hdr);
  String dlmt = "=";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^ +$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-mtc-measopts", hdr, "23"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_spc(String line)
{
  myprint("in treat_rtrv_spc", 1);
  String hdr = "SPC-N";
  addHeader(hdr);
  if (line.matches(" +[0-9a-z\\-]+$")) {
    addData(strCurHdr, line+"                ");
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-spc", hdr, "30"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_feat(String line)
{
  myprint("in treat_rtrv_feat", 1);
  String hdr = "    ITEM1      VALUE1  ITEM2      VALUE2  ITEM3      VALUE3";
  addHeader(hdr);
  String dlmt = "=";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{{"rtrv-feat", hdr, "15", "23", "34", "42", "53"}}};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_gttsel(String line)
{
  myprint("in treat_rtrv_gttsel", 1);
  if (line.matches("^.*ANSI TT  NP.*$")) {
    addHeader("    ANSI TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET");
  } else if (line.matches("^.*INT  TT  NP.*$")) {
    addHeader("    INT  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET");
  } else if (line.matches("^.*NAT  TT  NP.*$")) {
    addHeader("    NAT  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET");
  } else if (line.matches("^.*N24  TT  NP.*$")) {
    addHeader("    N24  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET");
  } else if (line.matches("^.*INTS TT  NP.*$")) {
    addHeader("    INTS TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET");
  } else if (line.matches("^.*NATS TT  NP.*$")) {
    addHeader("    NATS TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET");
  }
  if (line.matches("^.*e[1-9]+.*$")) {
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{
      {"rtrv-gttsel", "    ANSI TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "9", "13", "21", "26", "30", "36", "47", "64"},
      {"rtrv-gttsel", "    INT  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "9", "13", "21", "26", "30", "36", "47", "64"},
      {"rtrv-gttsel", "    NAT  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "9", "13", "21", "26", "30", "36", "47", "64"},
      {"rtrv-gttsel", "    N24  TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "9", "13", "21", "26", "30", "36", "47", "64"},
      {"rtrv-gttsel", "    INTS TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "9", "13", "21", "26", "30", "36", "47", "64"},
      {"rtrv-gttsel", "    NATS TT  NP      NAI  SSN SELID LSN        GTTSET           GTTSET", "9", "13", "21", "26", "30", "36", "47", "64"},
    }};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_dstn(String line)
{
  myprint("in treat_rtrv_dstn", 1);
  if (line.matches("^.*DPCI          CLLI        BEI.*$")) {
    addHeader("       DPCI          CLLI        BEI ELEI   ALIASA           ALIASN/N24    DMN");
  } else if (line.matches("^.*DPCN          CLLI        BEI.*$")) {
    addHeader("       DPCN          CLLI        BEI ELEI   ALIASA           ALIASI        DMN");
  } else if (line.matches("^.*DESTINATION ENTRIES ALLOCATED.*$")) {
    addHeader("Parameter                            Value");
  }
  if (line.matches("^.*[:\\-]+.*$")) {
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{
      {"rtrv-dstn", "       DPCI          CLLI        BEI ELEI   ALIASA           ALIASN/N24    DMN", "21", "33", "37", "42", "58", "75"},
      {"rtrv-dstn", "       DPCN          CLLI        BEI ELEI   ALIASA           ALIASI        DMN", "21", "33", "37", "42", "58", "75"},
      {"rtrv-dstn", "Parameter                            Value", "35"}
    }};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}


String pttrn = "^ *([a-z0-9]+).*$";
Pattern pattern = Pattern.compile(pttrn);
Matcher matcher;
String lnk;
Hashtable htRtrv_ls_cmds;

void
treat_rept_stat_ls(String line)
{
  myprint("in treat_rept_stat_ls", 1);
  if        (line.matches("^.*LSN           APCA.*$")) {
    addHeader("    LSN           APCA             PST           SST       AST");
  } else if (line.matches("^.*LSN           APCN.*$")) {
    addHeader("    LSN           APCN             PST           SST       AST");
  } else if (line.matches("^.*LSN           APCN24.*$")) {
    addHeader("    LSN           APCN24           PST           SST       AST");
  } else if (line.matches("^.*LSN           APCI.*$")) {
    addHeader("    LSN           APCI             PST           SST       AST");
  } else if (line.matches("^.*LSN           APCN16.*$")) {
    addHeader("    LSN           APCN16           PST           SST       AST");
  }
  if (line.matches("^.*-[A-Z].*$")) {
    addData(strCurHdr, line);
    matcher = pattern.matcher(line);
    if (matcher.find()) {
      lnk = "rtrv-ls:lsn=" + matcher.group(1);
      if (! htRtrv_ls_cmds.containsKey(lnk)) {
        htRtrv_ls_cmds.put(lnk, lnk);
      }
    }
  }
  if (line.matches(".*Command.*")) {
    String[][][] new_straHdrsPos = {{
      {"rept-stat-ls", "    LSN           APCA             PST           SST       AST", "17", "36", "50", "60"},
      {"rept-stat-ls", "    LSN           APCN             PST           SST       AST", "17", "36", "50", "60"},
      {"rept-stat-ls", "    LSN           APCN24           PST           SST       AST", "17", "36", "50", "60"},
      {"rept-stat-ls", "    LSN           APCI             PST           SST       AST", "17", "36", "50", "60"},
      {"rept-stat-ls", "    LSN           APCN16           PST           SST       AST", "17", "36", "50", "60"}
    }};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_card(String line)
{
  myprint("in treat_rtrv_card", 1);
  if (line.matches("^    CARD   TYPE      APPL     LSET NAME   LINK SLC LSET NAME   LINK SLC$")) {
    addHeader("    CARD   TYPE      APPL     LSET NAME1 LNK1 SLC1 LSET NAME2 LNK2 SLC2");
  }
  if (line.matches(".*[0-9].*")) {
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{
      {"rtrv-card", "    CARD   TYPE      APPL     LSET NAME1 LNK1 SLC1 LSET NAME2 LNK2 SLC2", "12", "22", "31", "42", "47", "52", "63", "68"}
    }};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}

void
treat_rtrv_aiqopts(String line)
{
  myprint("in treat_rtrv_aiqopts", 1);
  if (line.matches("    AIQ OPTIONS $")) {
    addHeader("     OPTION     VALUE");
  } else if (line.matches("    TRIGTYPE     PFX")) {
    addHeader("    TRIGTYPE     PFX");
  }
  String dlmt = "=";
  if (line.matches("^.*"+dlmt+".*$")) {
    line = replaceLineSeq(line, new String[] {dlmt, " "});
    addData(strCurHdr, line);
  }
  if (line.matches("^;$")) {
    String[][][] new_straHdrsPos = {{
      {"rtrv-aiqopts", "     OPTION     VALUE", "15"},
      {"rtrv-aiqopts", "    TRIGTYPE     PFX", "18"}
    }};
    straHdrsPos = concatArrs(straHdrsPos, new_straHdrsPos);
  }
}


void
treatSpclCmd(String line)
{
  myprint("in treatSpclCmd", 1);
  switch (strCurCmd) {
    case "rtrv-gttaset":
      treat_rtrv_gttaset(line);
      break;
    case "rtrv-gsmopts":
      treat_rtrv_gsmopts(line);
      break;
    case "rtrv-meas-sched":
      treat_rtrv_meas_sched(line);
      break;
    case "rtrv-sccp-serv":
      treat_rtrv_sccp_serv(line);
      break;
    case "rtrv-serial-num":
      treat_rtrv_serial_num(line);
      break;
    case "rtrv-sg-opts":
      treat_rtrv_sg_opts(line);
      break;
    case "rtrv-tbl-capacity":
      treat_rtrv_tbl_capacity(line);
      break;
    case "rtrv-th-alm":
      treat_rtrv_th_alm(line);
      break;
    case "rtrv-ip-card":
      treat_rtrv_ip_card(line);
      break;
    case "rtrv-measopts":
      treat_rtrv_measopts(line);
      break;
    case "rtrv-mtc-measopts":
      treat_rtrv_mtc_measopts(line);
      break;
    case "rtrv-spc":
      treat_rtrv_spc(line);
      break;
    case "rtrv-feat":
      treat_rtrv_feat(line);
      break;
    case "rtrv-gttsel":
      treat_rtrv_gttsel(line);
      break;
    case "rtrv-dstn":
      treat_rtrv_dstn(line);
      break;
    case "rept-stat-ls":
      treat_rept_stat_ls(line);
      break;
    case "rtrv-card":
      treat_rtrv_card(line);
      break;
    case "rtrv-aiqopts":
      treat_rtrv_aiqopts(line);
      break;
  }
}

/*
* SPECIAL COMMAND THREATMENT FUNCTIONS ===E=N=D=S===H=E=R=E===
*/


void emitResult(String path)
{
  myprint("in emitResult", 1);
  String strNormLine;
  BufferedWriter csvfile;
  int iHdrCnt = 0;
  String strFileName = path+strCurCmd+".csv";
  myprint("CMD:"+strCurCmd, 2);
  Iterator itHdrs = htHeaders.entrySet().iterator();
  while (itHdrs.hasNext()) {
    htEntry = itHdrs.next();
    ArrayList arCurData = htEntry.getValue();
    if (arCurData.size()>0) {
      int[] iNb = new int[2];
      findHdr(htEntry.getKey(), iNb);
      myprint("emitResult:"+iNb[0]+","+iNb[1], 2);
      strNormLine = addDelimiters(htEntry.getKey(), iNb[0], iNb[1]);
      strNormLine = checkMergeHdr(strNormLine);
      myprint("HDR:"+strNormLine, 2);
      if (bToCSV) {
        if (iHdrCnt>0) {strFileName = path+strCurCmd+(iHdrCnt+1)+".csv";}
        csvfile = new BufferedWriter(new FileWriter(strFileName));
        csvfile.write(strNormLine + "\n");
      }
      for (int i=0; i<arCurData.size(); i++) {
        strNormLine = addDelimiters(arCurData.get(i), iNb[0], iNb[1]);
        myprint("DATA:"+strNormLine, 2);
        if (bToCSV) {
          csvfile.write(strNormLine + "\n");
        }
      }
      iHdrCnt++;
    }
    if (csvfile!=null) {
      csvfile.close();
      csvfile = null;
    }
  }
  if (htRtrv_ls_cmds.size()>0) {
    BufferedWriter rtrv_ls;
    rtrv_ls = new BufferedWriter(new FileWriter(WD+"/lib/rtrv_ls.bsh"));
    rtrv_ls.write("rtrv_ls() {\n");
    rtrv_ls.write("  String[] BatchCmds = {\n");
    Iterator itHdrs = htRtrv_ls_cmds.entrySet().iterator();
    while (itHdrs.hasNext()) {
      htEntry = itHdrs.next();
      lnk = htEntry.getValue();
      rtrv_ls.write("  \""+lnk + "\",\n");
    }
    rtrv_ls.write("  \"last line\"\n");
    rtrv_ls.write("};\n  return this;\n}");
    rtrv_ls.close();
  }
}

//main
String convert(String strFileName, String WD_)
{
WD = WD_;
htRtrv_ls_cmds = new Hashtable();
StringBuffer allCmdsText = readFullOutput(strFileName);
String strResultPath = strFileName.substring(0, strFileName.lastIndexOf(File.separator))+File.separator;
String[] straAllLines = allCmdsText.toString().split(System.getProperty("line.separator"));
for(String strSingleLine: straAllLines){
  switch (getLineType(strSingleLine)) {
    case CMDNM: 
      strCurCmd = replaceLineSeq(strSingleLine, straCmdNmRefineRepRegExp);
      initCmdBlock(strCurCmd);
      myprint("convert:CMDNM:"+strCurCmd, 2);
      break;
    case HDR:
      myprint("convert:HDR:"+strSingleLine, 2);
      addHeader(strSingleLine);
      break;
    case DATA:
      addData(strCurHdr, strSingleLine);
      myprint("convert:DATA:"+strNormLine, 2);
      break;
    case OUTBGN:
      blIsCmdBody=true;
      myprint("convert:BEGIN:", 2);
      break;
    case OUTEND: 
      blIsCmdBody=false;
      emitResult(strResultPath);
      myprint("convert:END:", 2);
      break;
    default:
      myprint("convert:UNKWN:"+strNormLine, 2);
      if (bSPECIALCMD && blIsCmdBody) {
        treatSpclCmd(strSingleLine);
      }
      break;
  }
}
return strResultPath;
}

  return this;
}
